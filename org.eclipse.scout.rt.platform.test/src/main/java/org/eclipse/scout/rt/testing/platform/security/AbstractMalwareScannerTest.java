/*
 * Copyright (c) 2010, 2023 BSI Business Systems Integration AG
 *
 * This program and the accompanying materials are made
 * available under the terms of the Eclipse Public License 2.0
 * which is available at https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 */
package org.eclipse.scout.rt.testing.platform.security;

import static org.junit.Assert.assertThrows;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.nio.file.Path;

import org.eclipse.scout.rt.platform.resource.BinaryResource;
import org.eclipse.scout.rt.platform.security.MalwareScanner;
import org.eclipse.scout.rt.platform.security.UnsafeResourceException;
import org.eclipse.scout.rt.platform.util.IOUtility;
import org.junit.Test;

/**
 * Test an {@link MalwareScanner} implementation using a safe and a virus file
 * <p>
 * http://www.eicar.org/86-0-Intended-use.html
 */
public abstract class AbstractMalwareScannerTest {

  protected static final String SAFE_CONTENT = "hello safe world";
  protected static final String EICAR_TEST_VIRUS = "X5O!P%@AP[4\\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*";

  protected abstract MalwareScanner newMalwareScanner();

  @Test
  public void testNull_BinaryResource() {
    BinaryResource res = null;
    newMalwareScanner().scan(res);
  }

  @Test
  public void testNullContent_BinaryResource() {
    BinaryResource res = new BinaryResource("safe-test.txt", null);
    newMalwareScanner().scan(res);
  }

  @Test
  public void testEmptyContent_BinaryResource() {
    BinaryResource res = new BinaryResource("safe-test.txt", new byte[0]);
    newMalwareScanner().scan(res);
  }

  @Test
  public void testSafeContent_BinaryResource() {
    BinaryResource res = new BinaryResource("safe-test.txt", SAFE_CONTENT.getBytes());
    newMalwareScanner().scan(res);
  }

  @Test
  public void testEicarVirus_BinaryResource() {
    BinaryResource res = new BinaryResource("virus-test.txt", EICAR_TEST_VIRUS.getBytes());
    assertThrows("Resource 'virus-test.txt' is not safe", UnsafeResourceException.class, () -> newMalwareScanner().scan(res));
  }

  @Test
  public void testNull_Path() {
    Path path = null;
    newMalwareScanner().scan(path);
  }

  @Test
  public void testNullContent_Path() {
    InputStream input = new ByteArrayInputStream(new byte[0]);
    Path path = IOUtility.createTempFile(input, "safe-test", ".txt").toPath();
    newMalwareScanner().scan(path);
  }

  @Test
  public void testPathDirectory_Path() {
    Path path = IOUtility.createTempDirectory("safe-test").toPath();
    assertThrows("Scanning directory not supported.", UnsafeResourceException.class, () -> newMalwareScanner().scan(path));
  }

  @Test
  public void testSafeContent_Path() {
    InputStream input = new ByteArrayInputStream(SAFE_CONTENT.getBytes());
    Path path = IOUtility.createTempFile(input, "safe-test", ".txt").toPath();
    newMalwareScanner().scan(path);
  }

  @Test
  public void testEicarVirus_Path() {
    InputStream input = new ByteArrayInputStream(EICAR_TEST_VIRUS.getBytes());
    Path path = IOUtility.createTempFile(input, "virus-test", ".txt").toPath();
    assertThrows("File 'virus-test.txt.tmp' is not safe", UnsafeResourceException.class, () -> newMalwareScanner().scan(path));
  }
}
